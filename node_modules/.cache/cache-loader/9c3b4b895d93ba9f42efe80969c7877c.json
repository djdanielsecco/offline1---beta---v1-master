{"remainingRequest":"/Users/anubzsolutions/Documents/Ativadores/offline1 - cópia 4/node_modules/thread-loader/dist/cjs.js!/Users/anubzsolutions/Documents/Ativadores/offline1 - cópia 4/node_modules/babel-loader/lib/index.js!/Users/anubzsolutions/Documents/Ativadores/offline1 - cópia 4/src/assets/js/estimate.js","dependencies":[{"path":"/Users/anubzsolutions/Documents/Ativadores/offline1 - cópia 4/src/assets/js/estimate.js","mtime":1529606288417},{"path":"/Users/anubzsolutions/Documents/Ativadores/offline1 - cópia 4/.babelrc","mtime":1526042178000},{"path":"/Users/anubzsolutions/Documents/Ativadores/offline1 - cópia 4/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/anubzsolutions/Documents/Ativadores/offline1 - cópia 4/node_modules/thread-loader/dist/cjs.js","mtime":0},{"path":"/Users/anubzsolutions/Documents/Ativadores/offline1 - cópia 4/node_modules/babel-loader/lib/index.js","mtime":1519636541000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/anubzsolutions/Documents/Ativadores/offline1 - co\\u0301pia 4/node_modules/@babel/runtime/helpers/builtin/es6/asyncToGenerator\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.promise\";\n\n/*\nif (navigator.storage && navigator.storage.persist)\n  navigator.storage.persisted().then(persistent=>{\n    if (persistent)\n      console.log(\"Storage will not be cleared except by explicit user action\");\n    else\n      console.log(\"Storage may be cleared by the UA under storage pressure.\");\n  });*/\n\n/*navigator.storage.persist().then(persisted => {\n  if (persisted)\n    alert('storage is persisted until cleared by user');\n  else\n    alert('storage is best effort');\n});*/\n\n/*\nnavigator.storage.estimate().then(\n  estimate => {\n    alert(`using ${Math.round(estimate.usage / estimate.quota * 10000)/100}% of storage`);\n  },\n  err => {\n    alert('storage estimate not available');\n  });\n\n\nnavigator.webkitTemporaryStorage.queryUsageAndQuota (\n    function(usedBytes, grantedBytes) {\n        alert(`using ${Math.round(usedBytes / grantedBytes * 10000)/100}% of storage`);\n        console.log('we are using ', usedBytes, ' of ', grantedBytes, 'bytes');\n    },\n    function(e) { console.log('Error', e);  }\n);\n*/\n(function showIndexedDbSize() {\n  \"use strict\";\n\n  var db;\n  window.storesizes = new Array();\n\n  function openDatabase() {\n    return new Promise(function (resolve, reject) {\n      //prompt for DB name\n      var dbname = 'posts-store'; // 'firestore/[DEFAULT]/ativador-55a4a/main'; //prompt('Please enter your Database Name', '');\n\n      if (dbname !== null) {\n        var request = window.indexedDB.open(dbname);\n\n        request.onsuccess = function (event) {\n          db = event.target.result;\n          resolve(db.objectStoreNames);\n        };\n      }\n    });\n  }\n\n  function getObjectStoreData(storename) {\n    return new Promise(function (resolve, reject) {\n      var trans = db.transaction(storename, IDBTransaction.READ_ONLY);\n      var store = trans.objectStore(storename);\n      var items = [];\n\n      trans.oncomplete = function (evt) {\n        var szBytes = toSize(items);\n        var szMBytes = (szBytes / 1024 / 1024).toFixed(2);\n        storesizes.push({\n          'Store Name': storename,\n          'Items': items.length,\n          'Size': szMBytes + 'MB (' + szBytes + ' bytes)'\n        });\n        resolve();\n      };\n\n      var cursorRequest = store.openCursor();\n\n      cursorRequest.onerror = function (error) {\n        reject(error);\n      };\n\n      cursorRequest.onsuccess = function (evt) {\n        var cursor = evt.target.result;\n\n        if (cursor) {\n          items.push(cursor.value);\n          cursor.continue();\n        }\n      };\n    });\n  }\n\n  function toSize(items) {\n    var size = 0;\n\n    for (var i = 0; i < items.length; i++) {\n      var objectSize = JSON.stringify(items[i]).length;\n      size += objectSize * 2;\n    }\n\n    return size;\n  }\n\n  openDatabase().then(function (stores) {\n    var PromiseArray = [];\n\n    for (var i = 0; i < stores.length; i++) {\n      PromiseArray.push(getObjectStoreData(stores[i]));\n    }\n\n    Promise.all(PromiseArray).then(function () {\n      console.table(storesizes); //document.getElementById(\"percent\").innerHTML = storesizes;\n    });\n  });\n})();\n\nfunction storageEstimateWrapper() {\n  return _storageEstimateWrapper.apply(this, arguments);\n} //storageEstimateWrapper();\n\n/* async function showEstimatedQuota() {\n  if (navigator.storage && navigator.storage.estimate) {\n    const estimation = await navigator.storage.estimate();\n    console.log(`Quota: ${estimation.quota}`);\n    console.log(`Usage: ${estimation.usage}`);\n  } else {\n    console.error(\"StorageManager not found\");\n  }\n}\n\nshowEstimatedQuota();*/\n\n\nfunction _storageEstimateWrapper() {\n  _storageEstimateWrapper = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee() {\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!('storage' in navigator && 'estimate' in navigator.storage)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", navigator.storage.estimate());\n\n          case 2:\n            if (!('webkitTemporaryStorage' in navigator && 'queryUsageAndQuota' in navigator.webkitTemporaryStorage)) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              navigator.webkitTemporaryStorage.queryUsageAndQuota(function (usage, quota) {\n                resolve({\n                  usage: usage,\n                  quota: quota\n                });\n              }, reject);\n            }));\n\n          case 4:\n            return _context.abrupt(\"return\", Promise.resolve({\n              usage: NaN,\n              quota: NaN\n            }));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _storageEstimateWrapper.apply(this, arguments);\n}\n\nif (navigator.storage && navigator.storage.persist) navigator.storage.persist().then(function (persistent) {\n  if (persistent) console.log(\"Storage will not be cleared except by explicit user action\");else console.log(\"Storage may be cleared by the UA under storage pressure.\");\n});\n/*navigator.storage.estimate().then(function(estimate) {\n  document.getElementById(\"percent\").innerHTML =\n      (estimate.usage / estimate.quota).toFixed(2);\n});*/\n\nif ('storage' in navigator && 'estimate' in navigator.storage) {\n  navigator.storage.estimate().then(function (result) {\n    console.log('navigator.storage.estimate()');\n    console.log(result.usage);\n    console.log(result.quota);\n    document.getElementById(\"percent\").innerHTML = (result.usage / result.quota).toFixed(2);\n  });\n} else if ('webkitTemporaryStorage' in navigator && 'queryUsageAndQuota' in navigator.webkitTemporaryStorage) {\n  navigator.webkitTemporaryStorage.queryUsageAndQuota(function (usage, quota) {\n    console.log('navigator.webkitTemporaryStorage.queryUsageAndQuota()');\n    console.log(usage);\n    console.log(quota);\n    document.getElementById(\"percent\").innerHTML = (usage / quota).toFixed(2);\n  });\n} else {\n  console.log('none');\n  console.log(NaN);\n  console.log(NaN);\n}\n/** Check if storage is persisted already.\n  @returns {Promise<boolean>} Promise resolved with true if current origin is\n  using persistent storage, false if not, and undefined if the API is not\n  present.\n*/\n\n\nfunction isStoragePersisted() {\n  return _isStoragePersisted.apply(this, arguments);\n}\n/** Tries to convert to persisted storage.\n  @returns {Promise<boolean>} Promise resolved with true if successfully\n  persisted the storage, false if not, and undefined if the API is not present.\n*/\n\n\nfunction _isStoragePersisted() {\n  _isStoragePersisted = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee2() {\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return navigator.storage;\n\n          case 2:\n            _context2.t0 = _context2.sent;\n\n            if (!_context2.t0) {\n              _context2.next = 5;\n              break;\n            }\n\n            _context2.t0 = navigator.storage.persisted;\n\n          case 5:\n            if (!_context2.t0) {\n              _context2.next = 9;\n              break;\n            }\n\n            _context2.t1 = navigator.storage.persisted();\n            _context2.next = 10;\n            break;\n\n          case 9:\n            _context2.t1 = undefined;\n\n          case 10:\n            return _context2.abrupt(\"return\", _context2.t1);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n  return _isStoragePersisted.apply(this, arguments);\n}\n\nfunction persist() {\n  return _persist.apply(this, arguments);\n}\n/** Queries available disk quota.\n  @see https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate\n  @returns {Promise<{quota: number, usage: number}>} Promise resolved with\n  {quota: number, usage: number} or undefined.\n*/\n\n\nfunction _persist() {\n  _persist = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee3() {\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return navigator.storage;\n\n          case 2:\n            _context3.t0 = _context3.sent;\n\n            if (!_context3.t0) {\n              _context3.next = 5;\n              break;\n            }\n\n            _context3.t0 = navigator.storage.persist;\n\n          case 5:\n            if (!_context3.t0) {\n              _context3.next = 9;\n              break;\n            }\n\n            _context3.t1 = navigator.storage.persist();\n            _context3.next = 10;\n            break;\n\n          case 9:\n            _context3.t1 = undefined;\n\n          case 10:\n            return _context3.abrupt(\"return\", _context3.t1);\n\n          case 11:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this);\n  }));\n  return _persist.apply(this, arguments);\n}\n\nfunction showEstimatedQuota() {\n  return _showEstimatedQuota.apply(this, arguments);\n}\n/** Tries to persist storage without ever prompting user.\n  @returns {Promise<string>}\n    \"never\" In case persisting is not ever possible. Caller don't bother\n      asking user for permission.\n    \"prompt\" In case persisting would be possible if prompting user first.\n    \"persisted\" In case this call successfully silently persisted the storage,\n      or if it was already persisted.\n*/\n\n\nfunction _showEstimatedQuota() {\n  _showEstimatedQuota = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee4() {\n    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return navigator.storage;\n\n          case 2:\n            _context4.t0 = _context4.sent;\n\n            if (!_context4.t0) {\n              _context4.next = 5;\n              break;\n            }\n\n            _context4.t0 = navigator.storage.estimate;\n\n          case 5:\n            if (!_context4.t0) {\n              _context4.next = 9;\n              break;\n            }\n\n            _context4.t1 = navigator.storage.estimate();\n            _context4.next = 10;\n            break;\n\n          case 9:\n            _context4.t1 = undefined;\n\n          case 10:\n            return _context4.abrupt(\"return\", _context4.t1);\n\n          case 11:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, this);\n  }));\n  return _showEstimatedQuota.apply(this, arguments);\n}\n\nfunction tryPersistWithoutPromtingUser() {\n  return _tryPersistWithoutPromtingUser.apply(this, arguments);\n}\n\nfunction _tryPersistWithoutPromtingUser() {\n  _tryPersistWithoutPromtingUser = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee5() {\n    var persisted, permission;\n    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (!(!navigator.storage || !navigator.storage.persisted)) {\n              _context5.next = 2;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", \"never\");\n\n          case 2:\n            _context5.next = 4;\n            return navigator.storage.persisted();\n\n          case 4:\n            persisted = _context5.sent;\n\n            if (!persisted) {\n              _context5.next = 7;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", \"persisted\");\n\n          case 7:\n            if (!(!navigator.permissions || !navigator.permissions.query)) {\n              _context5.next = 9;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", \"prompt\");\n\n          case 9:\n            _context5.next = 11;\n            return navigator.permissions.query({\n              name: \"persistent-storage\"\n            });\n\n          case 11:\n            permission = _context5.sent;\n\n            if (!(permission.status === \"granted\")) {\n              _context5.next = 21;\n              break;\n            }\n\n            _context5.next = 15;\n            return navigator.storage.persist();\n\n          case 15:\n            persisted = _context5.sent;\n\n            if (!persisted) {\n              _context5.next = 20;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", \"persisted\");\n\n          case 20:\n            throw new Error(\"Failed to persist\");\n\n          case 21:\n            if (!(permission.status === \"prompt\")) {\n              _context5.next = 23;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", \"prompt\");\n\n          case 23:\n            return _context5.abrupt(\"return\", \"never\");\n\n          case 24:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, this);\n  }));\n  return _tryPersistWithoutPromtingUser.apply(this, arguments);\n}\n\nfunction initStoragePersistence() {\n  return _initStoragePersistence.apply(this, arguments);\n} //initStoragePersistence();\n\n/*navigator.webkitPersistentStorage().then(function(estimate) {\n  document.getElementById(\"percent\").innerHTML =\n      (estimate.usage / estimate.quota).toFixed(2);\n});*/\n\n/*let geo = new GeolocationSensor({ frequency: 1 });\ngeo.start();\n\ngeo.onreading = () => console.log(`lat: ${geo.latitude}, long: ${geo.longitude}`);\n\ngeo.onerror = event => console.error(event.error.name, event.error.message);*/\n\n/*(function(globalObject) {\n  'use strict';\n  if (!('navigator' in globalObject) || !('location' in globalObject))\n    return;\n  \n  // [SecureContext]\n  if (globalObject.location.protocol !== 'https:')\n    return;\n  \n  if (!('storage' in globalObject.navigator))\n    globalObject.navigator.storage = {};\n  \n  var storage = globalObject.navigator.storage;\n  \n  // Promise<boolean> persisted();\n  storage.persisted = storage.persisted || function() {\n    return Promise.resolve(false);\n  };\n  \n  // [Exposed=Window] Promise<boolean> persist();\n  if ('window' in globalObject && globalObject.window === window) {\n    storage.persist = storage.persist || function() {\n      return Promise.resolve(false);\n    }; \n  }*/\n\n/*\n\nvar storageInfo = null;\n\nif(navigator.webkitTemporaryStorage) {\n  storageInfo = navigator.webkitTemporaryStorage;\n\tconsole.log('persistence ok')\n\tconsole.log(storageInfo);\n} else if(navigator.webkitPersistentStorage) {\n  storageInfo = navigator.webkitPersistentStorage;\n\tconsole.log(storageInfo);\n} else if (window.webkitStorageInfo) {\n  storageInfo = window.webkitStorageInfo;\n\tconsole.log(storageInfo);\n}\n*/\n\n/*navigator.webkitTemporaryStorage.queryUsageAndQuota ( \n    function(usedBytes, grantedBytes) {  \n        console.log('we are using ', usedBytes, ' of ', grantedBytes, 'bytes');\n    }, \n    function(e) { console.log('Error', e);  }\n);*/\n\n\nfunction _initStoragePersistence() {\n  _initStoragePersistence = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee6() {\n    var persist;\n    return regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return tryPersistWithoutPromtingUser();\n\n          case 2:\n            persist = _context6.sent;\n            _context6.t0 = persist;\n            _context6.next = _context6.t0 === \"never\" ? 6 : _context6.t0 === \"persisted\" ? 8 : _context6.t0 === \"prompt\" ? 10 : 12;\n            break;\n\n          case 6:\n            console.log(\"Not possible to persist storage\");\n            return _context6.abrupt(\"break\", 12);\n\n          case 8:\n            console.log(\"Successfully persisted storage silently\");\n            return _context6.abrupt(\"break\", 12);\n\n          case 10:\n            console.log(\"Not persisted, but we may prompt user when we want to.\");\n            return _context6.abrupt(\"break\", 12);\n\n          case 12:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6, this);\n  }));\n  return _initStoragePersistence.apply(this, arguments);\n}",{"version":3,"sources":["src/assets/js/estimate.js"],"names":["showIndexedDbSize","db","window","storesizes","Array","openDatabase","Promise","resolve","reject","dbname","request","indexedDB","open","onsuccess","event","target","result","objectStoreNames","getObjectStoreData","storename","trans","transaction","IDBTransaction","READ_ONLY","store","objectStore","items","oncomplete","evt","szBytes","toSize","szMBytes","toFixed","push","length","cursorRequest","openCursor","onerror","error","cursor","value","continue","size","i","objectSize","JSON","stringify","then","stores","PromiseArray","all","console","table","storageEstimateWrapper","navigator","storage","estimate","webkitTemporaryStorage","queryUsageAndQuota","usage","quota","NaN","persist","persistent","log","document","getElementById","innerHTML","isStoragePersisted","persisted","undefined","showEstimatedQuota","tryPersistWithoutPromtingUser","permissions","query","name","permission","status","Error","initStoragePersistence"],"mappings":"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","sourceRoot":"/Users/anubzsolutions/Documents/Ativadores/offline1 - cópia 4","sourcesContent":["\n\n/*\nif (navigator.storage && navigator.storage.persist)\n  navigator.storage.persisted().then(persistent=>{\n    if (persistent)\n      console.log(\"Storage will not be cleared except by explicit user action\");\n    else\n      console.log(\"Storage may be cleared by the UA under storage pressure.\");\n  });*/\n\n/*navigator.storage.persist().then(persisted => {\n  if (persisted)\n    alert('storage is persisted until cleared by user');\n  else\n    alert('storage is best effort');\n});*/\n/*\nnavigator.storage.estimate().then(\n  estimate => {\n    alert(`using ${Math.round(estimate.usage / estimate.quota * 10000)/100}% of storage`);\n  },\n  err => {\n    alert('storage estimate not available');\n  });\n\n\nnavigator.webkitTemporaryStorage.queryUsageAndQuota (\n    function(usedBytes, grantedBytes) {\n        alert(`using ${Math.round(usedBytes / grantedBytes * 10000)/100}% of storage`);\n        console.log('we are using ', usedBytes, ' of ', grantedBytes, 'bytes');\n    },\n    function(e) { console.log('Error', e);  }\n);\n*/\n\n\n\n\n\n(function showIndexedDbSize() {\n  \"use strict\";\n  var db;\n  window.storesizes = new Array();\n \n  function openDatabase() {\n    return new Promise(function(resolve, reject) {\n      //prompt for DB name\n      var dbname =  'posts-store';      // 'firestore/[DEFAULT]/ativador-55a4a/main'; //prompt('Please enter your Database Name', '');\n\n      if (dbname !== null) {\n        var request = window.indexedDB.open(dbname);\n        request.onsuccess = function (event) {\n          db = event.target.result;\n          resolve(db.objectStoreNames);\n        };\n      }\n      \n    });\n  }\n \n  function getObjectStoreData(storename) {\n    return new Promise(function(resolve, reject) {\n      var trans = db.transaction(storename, IDBTransaction.READ_ONLY);\n      var store = trans.objectStore(storename);\n      var items = [];\n      trans.oncomplete = function(evt) {\n        var szBytes = toSize(items);\n        var szMBytes = (szBytes / 1024 / 1024).toFixed(2);\n        storesizes.push({'Store Name': storename, 'Items': items.length,  'Size': szMBytes + 'MB (' + szBytes + ' bytes)'});\n        resolve();\n      };\n      var cursorRequest = store.openCursor();\n      cursorRequest.onerror = function(error) {\n        reject(error);\n      };\n      cursorRequest.onsuccess = function(evt) {                   \n        var cursor = evt.target.result;\n        if (cursor) {\n            items.push(cursor.value);\n            cursor.continue();\n        }\n      }\n    });\n  }\n \n  function toSize(items) {\n    var size = 0;\n    for (var i = 0; i < items.length; i++) {\n        var objectSize = JSON.stringify(items[i]).length;\n        size += objectSize * 2;\n    }\n    return size;\n  }\n \n  openDatabase().then(function(stores) {\n    var PromiseArray = [];\n    for (var i=0; i < stores.length; i++) {\n      PromiseArray.push(getObjectStoreData(stores[i]));    \n    }\n    Promise.all(PromiseArray).then(function() {\n       console.table(storesizes);\n        //document.getElementById(\"percent\").innerHTML = storesizes;\n    });\n  });\n}());\n\n\n\nasync function storageEstimateWrapper() {\n  if ('storage' in navigator && 'estimate' in navigator.storage) {\n    // We've got the real thing! Return its response.\n    return navigator.storage.estimate();\n  }\n\n  if ('webkitTemporaryStorage' in navigator &&\n      'queryUsageAndQuota' in navigator.webkitTemporaryStorage) {\n    // Return a promise-based wrapper that will follow the expected interface.\n    return new Promise(function(resolve, reject) {\n      navigator.webkitTemporaryStorage.queryUsageAndQuota(\n        function(usage, quota) {resolve({usage: usage, quota: quota})},\n        reject\n      );\n    });\n  }\n\n  // If we can't estimate the values, return a Promise that resolves with NaN.\n  return Promise.resolve({usage: NaN, quota: NaN});\n}\n//storageEstimateWrapper();\n\n/* async function showEstimatedQuota() {\n  if (navigator.storage && navigator.storage.estimate) {\n    const estimation = await navigator.storage.estimate();\n    console.log(`Quota: ${estimation.quota}`);\n    console.log(`Usage: ${estimation.usage}`);\n  } else {\n    console.error(\"StorageManager not found\");\n  }\n}\n\nshowEstimatedQuota();*/\n\nif (navigator.storage && navigator.storage.persist)\n  navigator.storage.persist().then(function(persistent) {\n    if (persistent)\n      console.log(\"Storage will not be cleared except by explicit user action\");\n    else\n      console.log(\"Storage may be cleared by the UA under storage pressure.\");\n  });\n\n/*navigator.storage.estimate().then(function(estimate) {\n  document.getElementById(\"percent\").innerHTML =\n      (estimate.usage / estimate.quota).toFixed(2);\n});*/\n\n if ('storage' in navigator && 'estimate' in navigator.storage) {\n    navigator.storage.estimate().then(function(result) {\n   console.log( 'navigator.storage.estimate()');\n   console.log(result.usage);\n   console.log(result.quota);\n\t\tdocument.getElementById(\"percent\").innerHTML =\n      (result.usage / result.quota).toFixed(2);\n    });\n  } else if ('webkitTemporaryStorage' in navigator && 'queryUsageAndQuota' in navigator.webkitTemporaryStorage) {\n    navigator.webkitTemporaryStorage.queryUsageAndQuota(function(usage, quota) {\n   console.log( 'navigator.webkitTemporaryStorage.queryUsageAndQuota()');\n   console.log(usage);\n   console.log(quota);\n\t\tdocument.getElementById(\"percent\").innerHTML =\n      (usage / quota).toFixed(2);\n    });\n  } else {\n console.log( 'none');\n console.log(NaN);\n console.log(NaN);\n  }\n/** Check if storage is persisted already.\n  @returns {Promise<boolean>} Promise resolved with true if current origin is\n  using persistent storage, false if not, and undefined if the API is not\n  present.\n*/\nasync function isStoragePersisted() {\n  return await navigator.storage && navigator.storage.persisted ?\n    navigator.storage.persisted() :\n    undefined;\n}\n\n/** Tries to convert to persisted storage.\n  @returns {Promise<boolean>} Promise resolved with true if successfully\n  persisted the storage, false if not, and undefined if the API is not present.\n*/\nasync function persist() {\n  return await navigator.storage && navigator.storage.persist ?\n    navigator.storage.persist() :\n    undefined;\n}\n\n/** Queries available disk quota.\n  @see https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate\n  @returns {Promise<{quota: number, usage: number}>} Promise resolved with\n  {quota: number, usage: number} or undefined.\n*/\nasync function showEstimatedQuota() {\n  return await navigator.storage && navigator.storage.estimate ?\n    navigator.storage.estimate() :\n    undefined;\n}\n\n/** Tries to persist storage without ever prompting user.\n  @returns {Promise<string>}\n    \"never\" In case persisting is not ever possible. Caller don't bother\n      asking user for permission.\n    \"prompt\" In case persisting would be possible if prompting user first.\n    \"persisted\" In case this call successfully silently persisted the storage,\n      or if it was already persisted.\n*/\nasync function tryPersistWithoutPromtingUser() {\n  if (!navigator.storage || !navigator.storage.persisted) {\n    return \"never\";\n  }\n  let persisted = await navigator.storage.persisted();\n  if (persisted) {\n    return \"persisted\";\n  }\n  if (!navigator.permissions || !navigator.permissions.query) {\n    return \"prompt\"; // It MAY be successful to prompt. Don't know.\n  }\n  const permission = await navigator.permissions.query({\n    name: \"persistent-storage\"\n  });\n  if (permission.status === \"granted\") {\n    persisted = await navigator.storage.persist();\n    if (persisted) {\n      return \"persisted\";\n    } else {\n      throw new Error(\"Failed to persist\");\n    }\n  }\n  if (permission.status === \"prompt\") {\n    return \"prompt\";\n  }\n  return \"never\";\n}\nasync function initStoragePersistence() {\n  const persist = await tryPersistWithoutPromtingUser();\n  switch (persist) {\n    case \"never\":\n      console.log(\"Not possible to persist storage\");\n      break;\n    case \"persisted\":\n      console.log(\"Successfully persisted storage silently\");\n      break;\n    case \"prompt\":\n      console.log(\"Not persisted, but we may prompt user when we want to.\");\n      break;\n  }\n}\n//initStoragePersistence();\n\n/*navigator.webkitPersistentStorage().then(function(estimate) {\n  document.getElementById(\"percent\").innerHTML =\n      (estimate.usage / estimate.quota).toFixed(2);\n});*/\n\n/*let geo = new GeolocationSensor({ frequency: 1 });\ngeo.start();\n\ngeo.onreading = () => console.log(`lat: ${geo.latitude}, long: ${geo.longitude}`);\n\ngeo.onerror = event => console.error(event.error.name, event.error.message);*/\n\n\n/*(function(globalObject) {\n  'use strict';\n  if (!('navigator' in globalObject) || !('location' in globalObject))\n    return;\n  \n  // [SecureContext]\n  if (globalObject.location.protocol !== 'https:')\n    return;\n  \n  if (!('storage' in globalObject.navigator))\n    globalObject.navigator.storage = {};\n  \n  var storage = globalObject.navigator.storage;\n  \n  // Promise<boolean> persisted();\n  storage.persisted = storage.persisted || function() {\n    return Promise.resolve(false);\n  };\n  \n  // [Exposed=Window] Promise<boolean> persist();\n  if ('window' in globalObject && globalObject.window === window) {\n    storage.persist = storage.persist || function() {\n      return Promise.resolve(false);\n    }; \n  }*/\n  \n  \n/*\n\nvar storageInfo = null;\n\nif(navigator.webkitTemporaryStorage) {\n  storageInfo = navigator.webkitTemporaryStorage;\n\tconsole.log('persistence ok')\n\tconsole.log(storageInfo);\n} else if(navigator.webkitPersistentStorage) {\n  storageInfo = navigator.webkitPersistentStorage;\n\tconsole.log(storageInfo);\n} else if (window.webkitStorageInfo) {\n  storageInfo = window.webkitStorageInfo;\n\tconsole.log(storageInfo);\n}\n*/\n\n/*navigator.webkitTemporaryStorage.queryUsageAndQuota ( \n    function(usedBytes, grantedBytes) {  \n        console.log('we are using ', usedBytes, ' of ', grantedBytes, 'bytes');\n    }, \n    function(e) { console.log('Error', e);  }\n);*/\n\n"]}]}