{"remainingRequest":"/Users/anubzsolutions/Documents/Ativadores/offline1 - cópia 4/node_modules/babel-loader/lib/index.js!/Users/anubzsolutions/Documents/Ativadores/offline1 - cópia 4/public/src/js/serviceworker-cache-polyfill.js","dependencies":[{"path":"/Users/anubzsolutions/Documents/Ativadores/offline1 - cópia 4/public/src/js/serviceworker-cache-polyfill.js","mtime":1529279424000},{"path":"/Users/anubzsolutions/Documents/Ativadores/offline1 - cópia 4/.babelrc","mtime":1526042178000},{"path":"/Users/anubzsolutions/Documents/Ativadores/offline1 - cópia 4/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/anubzsolutions/Documents/Ativadores/offline1 - cópia 4/node_modules/babel-loader/lib/index.js","mtime":1519636541000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/web.dom.iterable\";\n\n/**\n * Copyright 2015 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nif (!Cache.prototype.add) {\n  Cache.prototype.add = function add(request) {\n    return this.addAll([request]);\n  };\n}\n\nif (!Cache.prototype.addAll) {\n  Cache.prototype.addAll = function addAll(requests) {\n    var cache = this; // Since DOMExceptions are not constructable:\n\n    function NetworkError(message) {\n      this.name = 'NetworkError';\n      this.code = 19;\n      this.message = message;\n    }\n\n    NetworkError.prototype = Object.create(Error.prototype);\n    return Promise.resolve().then(function () {\n      if (arguments.length < 1) throw new TypeError(); // Simulate sequence<(Request or USVString)> binding:\n\n      var sequence = [];\n      requests = requests.map(function (request) {\n        if (request instanceof Request) {\n          return request;\n        } else {\n          return String(request); // may throw TypeError\n        }\n      });\n      return Promise.all(requests.map(function (request) {\n        if (typeof request === 'string') {\n          request = new Request(request);\n        }\n\n        var scheme = new URL(request.url).protocol;\n\n        if (scheme !== 'http:' && scheme !== 'https:') {\n          throw new NetworkError(\"Invalid scheme\");\n        }\n\n        return fetch(request.clone());\n      }));\n    }).then(function (responses) {\n      // TODO: check that requests don't overwrite one another\n      // (don't think this is possible to polyfill due to opaque responses)\n      return Promise.all(responses.map(function (response, i) {\n        return cache.put(requests[i], response);\n      }));\n    }).then(function () {\n      return undefined;\n    });\n  };\n}\n\nif (!CacheStorage.prototype.match) {\n  // This is probably vulnerable to race conditions (removing caches etc)\n  CacheStorage.prototype.match = function match(request, opts) {\n    var caches = this;\n    return this.keys().then(function (cacheNames) {\n      var match;\n      return cacheNames.reduce(function (chain, cacheName) {\n        return chain.then(function () {\n          return match || caches.open(cacheName).then(function (cache) {\n            return cache.match(request, opts);\n          }).then(function (response) {\n            match = response;\n            return match;\n          });\n        });\n      }, Promise.resolve());\n    });\n  };\n}",{"version":3,"sources":["public/src/js/serviceworker-cache-polyfill.js"],"names":["Cache","prototype","add","request","addAll","requests","cache","NetworkError","message","name","code","Object","create","Error","Promise","resolve","then","arguments","length","TypeError","sequence","map","Request","String","all","scheme","URL","url","protocol","fetch","clone","responses","response","i","put","undefined","CacheStorage","match","opts","caches","keys","cacheNames","reduce","chain","cacheName","open"],"mappings":"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","sourceRoot":"/Users/anubzsolutions/Documents/Ativadores/offline1 - cópia 4","sourcesContent":["/**\n * Copyright 2015 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nif (!Cache.prototype.add) {\n  Cache.prototype.add = function add(request) {\n    return this.addAll([request]);\n  };\n}\n\nif (!Cache.prototype.addAll) {\n  Cache.prototype.addAll = function addAll(requests) {\n    var cache = this;\n\n    // Since DOMExceptions are not constructable:\n    function NetworkError(message) {\n      this.name = 'NetworkError';\n      this.code = 19;\n      this.message = message;\n    }\n    NetworkError.prototype = Object.create(Error.prototype);\n\n    return Promise.resolve().then(function() {\n      if (arguments.length < 1) throw new TypeError();\n\n      // Simulate sequence<(Request or USVString)> binding:\n      var sequence = [];\n\n      requests = requests.map(function(request) {\n        if (request instanceof Request) {\n          return request;\n        }\n        else {\n          return String(request); // may throw TypeError\n        }\n      });\n\n      return Promise.all(\n        requests.map(function(request) {\n          if (typeof request === 'string') {\n            request = new Request(request);\n          }\n\n          var scheme = new URL(request.url).protocol;\n\n          if (scheme !== 'http:' && scheme !== 'https:') {\n            throw new NetworkError(\"Invalid scheme\");\n          }\n\n          return fetch(request.clone());\n        })\n      );\n    }).then(function(responses) {\n      // TODO: check that requests don't overwrite one another\n      // (don't think this is possible to polyfill due to opaque responses)\n      return Promise.all(\n        responses.map(function(response, i) {\n          return cache.put(requests[i], response);\n        })\n      );\n    }).then(function() {\n      return undefined;\n    });\n  };\n}\n\nif (!CacheStorage.prototype.match) {\n  // This is probably vulnerable to race conditions (removing caches etc)\n  CacheStorage.prototype.match = function match(request, opts) {\n    var caches = this;\n\n    return this.keys().then(function(cacheNames) {\n      var match;\n\n      return cacheNames.reduce(function(chain, cacheName) {\n        return chain.then(function() {\n          return match || caches.open(cacheName).then(function(cache) {\n            return cache.match(request, opts);\n          }).then(function(response) {\n            match = response;\n            return match;\n          });\n        });\n      }, Promise.resolve());\n    });\n  };\n}\n"]}]}