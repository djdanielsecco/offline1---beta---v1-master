{"remainingRequest":"/Users/anubzsolutions/Documents/Ativadores/offline1 - cópia 3 copy 3 -final/node_modules/thread-loader/dist/cjs.js!/Users/anubzsolutions/Documents/Ativadores/offline1 - cópia 3 copy 3 -final/node_modules/babel-loader/lib/index.js!/Users/anubzsolutions/Documents/Ativadores/offline1 - cópia 3 copy 3 -final/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anubzsolutions/Documents/Ativadores/offline1 - cópia 3 copy 3 -final/src/components/comps/Autocomplete.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/anubzsolutions/Documents/Ativadores/offline1 - cópia 3 copy 3 -final/src/components/comps/Autocomplete.vue","mtime":1526412449000},{"path":"/Users/anubzsolutions/Documents/Ativadores/offline1 - cópia 3 copy 3 -final/.babelrc","mtime":1526042178000},{"path":"/Users/anubzsolutions/Documents/Ativadores/offline1 - cópia 3 copy 3 -final/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/anubzsolutions/Documents/Ativadores/offline1 - cópia 3 copy 3 -final/node_modules/thread-loader/dist/cjs.js","mtime":0},{"path":"/Users/anubzsolutions/Documents/Ativadores/offline1 - cópia 3 copy 3 -final/node_modules/babel-loader/lib/index.js","mtime":1519636541000},{"path":"/Users/anubzsolutions/Documents/Ativadores/offline1 - cópia 3 copy 3 -final/node_modules/vue-loader/lib/index.js","mtime":1525995699000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  props: {\n    value: {\n      type: [String, Number]\n    },\n    suggestions: {\n      type: Array,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      open: false,\n      current: 0\n    };\n  },\n  computed: {\n    // Filtering the suggestion based on the input\n    matches: function matches() {\n      var _this = this;\n\n      return this.suggestions.filter(function (obj) {\n        return obj.name_public.toLowerCase().indexOf(_this.value) >= 0 || obj.name_public.toUpperCase().indexOf(_this.value) >= 0 || obj.name_public.indexOf(_this.value) >= 0;\n      });\n    },\n    openSuggestion: function openSuggestion() {\n      return this.selection !== '' && this.matches.length !== 0 && this.open === true;\n    }\n  },\n  methods: {\n    updateValue: function updateValue(value) {\n      if (this.open === false) {\n        this.open = true;\n        this.current = 0;\n      }\n\n      this.$emit('input', value);\n    },\n    // When enter pressed on the input\n    enter: function enter() {\n      this.$emit('input', this.matches[this.current].name_public.toUpperCase());\n      this.open = false;\n    },\n    // When up pressed while suggestions are open\n    up: function up() {\n      if (this.current > 0) {\n        this.current--;\n      }\n    },\n    // When up pressed while suggestions are open\n    down: function down() {\n      if (this.current < this.matches.length - 1) {\n        this.current++;\n      }\n    },\n    // For highlighting element\n    isActive: function isActive(index) {\n      return index === this.current;\n    },\n    // When one of the suggestion is clicked\n    suggestionClick: function suggestionClick(index) {\n      this.$emit('input', this.matches[index].name_public + ' (' + this.matches[index].name_scientific + ')'); //CodTree = this.matches[index].cod_tree\n\n      this.$store.dispatch('setCodTree', this.matches[index]);\n      console.log('codtree>', this.matches[index]);\n      this.open = false;\n    }\n  }\n};",{"version":3,"sources":["Autocomplete.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAmBA;;;qBAKA,AACA;AAHA;;YAKA;gBACA,AACA,AACA;AAJA;AALA;wBAUA;;YAEA;eACA,AACA;AAHA;AAIA;;AAEA;;AACA;;oDACA;6KACA;AACA;AACA;8CACA;gCACA,8BACA,mBACA;AACA,AACA;AAZA;;6CAcA;+BACA;oBACA;uBACA;AACA;;0BACA;AACA;AACA;4BACA;iEACA;kBACA;AACA;AACA;sBACA;4BACA;aACA;AACA;AACA;AACA;0BACA;kDACA;aACA;AACA;AACA;AACA;uCACA;4BACA;AACA;AACA;qDACA;yGACA,MACA;;sDACA;2CACA;kBACA;AACA,AACA;AArCA;AA9BA","file":"Autocomplete.vue","sourceRoot":"src/components/comps","sourcesContent":["<template>\n    <div style=\"position:relative\" v-bind:class=\"{'open':openSuggestion}\">\n        <input class=\"form-control\" placeholder=\"Buscar por...\" type=\"text\" :value=\"value\" @input=\"updateValue($event.target.value)\"\n          @keydown.enter = 'enter'\n          @keydown.down = 'down'\n          @keydown.up = 'up'\n        >\n        <ul class=\"dropdown-menu\" style=\"width:auto\">\n            <li v-for=\"(suggestion, index) in matches\"\n                v-bind:class=\"{'active': isActive(index)}\"\n                @click=\"suggestionClick(index)\"\n            >\n              <a href=\"#\">{{ suggestion.name_public.toUpperCase()}} <small>({{ suggestion.name_scientific }})</small>\n              </a>\n            </li>\n        </ul>\n    </div>\n</template>\n<script>\n    export default {\n        props: {\n            value: {\n                type: [String, Number],\n               \n            },\n            suggestions: {\n                type: Array,\n                required: true\n            }\n        },\n        data() {\n            return {\n                open: false,\n                current: 0\n            }\n        },\n        computed: {\n            // Filtering the suggestion based on the input\n            matches() {\n                return this.suggestions.filter((obj) => {\n                    return obj.name_public.toLowerCase().indexOf(this.value) >= 0 ||  obj.name_public.toUpperCase().indexOf(this.value) >= 0 || obj.name_public.indexOf(this.value) >= 0\n                })\n            },\n            openSuggestion() {\n                return this.selection !== '' &&\n                    this.matches.length !== 0 &&\n                    this.open === true\n            }\n        },\n        methods: {\n            updateValue(value) {\n                if (this.open === false) {\n                    this.open = true\n                    this.current = 0\n                }\n                this.$emit('input', value)\n            },\n            // When enter pressed on the input\n            enter() {\n                this.$emit('input', this.matches[this.current].name_public.toUpperCase())\n                this.open = false\n            },\n            // When up pressed while suggestions are open\n            up() {\n                if (this.current > 0) {\n                    this.current--\n                }\n            },\n            // When up pressed while suggestions are open\n            down() {\n                if (this.current < this.matches.length - 1) {\n                    this.current++\n                }\n            },\n            // For highlighting element\n            isActive(index) {\n                return index === this.current\n            },\n            // When one of the suggestion is clicked\n            suggestionClick(index) {\n                this.$emit('input', this.matches[index].name_public + ' (' + this.matches[index].name_scientific +')')\n                //CodTree = this.matches[index].cod_tree\n                this.$store.dispatch('setCodTree', this.matches[index])\n                console.log('codtree>',this.matches[index])\n                this.open = false\n            }\n        }\n    }\n</script>\n<style scoped>\n    a {\n        display: block;\n        font-size: 0.7em;\n    }\n</style>\n"]}]}